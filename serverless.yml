service: sit-sample-bot

provider:
  name: aws
  runtime: python3.6
  timeout: 20
  stage: dev
  region: us-east-2
  environment:
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}

custom:
  alerts:
    stages:
      - dev

    dashboards: true

    topics:
      ok: ${self:service}-${opt:stage}-alerts-ok
      alarm: ${self:service}-${opt:stage}-alerts-alarm
      insufficientData: ${self:service}-${opt:stage}-alerts-insufficientData
    definitions:  # these defaults are merged with your definitions
      functionErrors:
        period: 300 # override period
      customAlarm:
        description: 'My custom alarm'
        namespace: 'AWS/Lambda'
        metric: duration
        threshold: 200
        statistic: Average
        period: 300
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration

functions:
  sample_telegram:
    handler: telegram_bot.publish_telegram_msg
    events:
      - http:
          path: my-custom-url
          method: post
          cors: true
    alarms: # merged with function alarms
      - customAlarm
      - name: fooAlarm # creates new alarm or overwrites some properties of the alarm (with the same name) from definitions
        namespace: 'AWS/Lambda'
        metric: errors # define custom metrics here
        threshold: 1
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold


plugins:
  - serverless-plugin-aws-alerts
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: false